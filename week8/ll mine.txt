// 230968270
// Anamay Tripathy
// Implementation of Linked List

#include <iostream>
using namespace std;

struct node {
    int data;
    struct node* link;
};

struct node* root = NULL;

void append() {
    struct node* newnode = new struct node;
    cout << "Please enter the data to add: ";
    cin >> newnode->data;
    newnode->link = NULL;

    if (root == NULL) {
        root = newnode;
    } else {
        struct node* p = root;
        while (p->link != NULL) {
            p = p->link;
        }
        p->link = newnode;
    }
}

void appendbefore() {
    int ele, flag = 0, pos = 0;
    cout << "Please enter the element before which we need to add the element: ";
    cin >> ele;

    struct node* p = root;
    struct node* prev = NULL;
    
    while (p != NULL) {
        if (p->data == ele) {
            flag = 1;
            break;
        }
        prev = p;
        p = p->link;
    }

    if (flag == 1) {
        struct node* newnode = new struct node;
        cout << "Please enter the data to add: ";
        cin >> newnode->data;
        newnode->link = p;

        if (prev == NULL) {  
            root = newnode;
        } else {
            prev->link = newnode;
        }
    } else {
        cout << "No such element in the list." << endl;
    }
}

void appendafter() {
    int ele, flag = 0;
    cout << "Please enter the element after which we need to add the element: ";
    cin >> ele;

    struct node* p = root;
    while (p != NULL) {
        if (p->data == ele) {
            flag = 1;
            break;
        }
        p = p->link;
    }

    if (flag == 1) {
        struct node* newnode = new struct node;
        cout << "Please enter the data to add: ";
        cin >> newnode->data;
        newnode->link = p->link;
        p->link = newnode;
    } else {
        cout << "No such element in the list." << endl;
    }
}

void deleteele() {
    int ele, flag = 0;
    cout << "Please enter the element to delete: ";
    cin >> ele;

    struct node* p = root;
    struct node* prev = NULL;

    while (p != NULL) {
        if (p->data == ele) {
            flag = 1;
            break;
        }
        prev = p;
        p = p->link;
    }

    if (flag == 1) {
        if (prev == NULL) {
            root = p->link;
        } else {
            prev->link = p->link;
        }
        delete p;
        cout << "Element deleted successfully." << endl;
    } else {
        cout << "No such element in the list." << endl;
    }
}

void display() {
    struct node* p = root;
    if (p == NULL) {
        cout << "List is empty." << endl;
        return;
    }
    while (p != NULL) {
        cout << p->data << " ";
        p = p->link;
    }
    cout << endl;
}

int main() {
    int ch;
    do {
        cout << "Please enter your choice:" << endl;
        cout << "1. Insert at end" << endl;
        cout << "2. Insert after" << endl;
        cout << "3. Insert before" << endl;
        cout << "4. Delete element" << endl;
        cout << "5. Print list" << endl;
        cout << "6. Exit" << endl;
        cin >> ch;

        switch (ch) {
            case 1:
                append();
                break;
            case 2:
                appendafter();
                break;
            case 3:
                appendbefore();
                break;
            case 4:
                deleteele();
                break;
            case 5:
                display();
                break;
            case 6:
                exit(0);
            default:
                cout << "Invalid choice, try again!" << endl;
        }
    } while (ch != 6);

    return 0;
}
