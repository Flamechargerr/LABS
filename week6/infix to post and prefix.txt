// 230968270
// Anamay Tripathy
// Infix to Postfix and Prefix Conversion

#include<iostream>
#include<string.h>
using namespace std;

char stack[100];
int top = -1;

int isempty();
int isfull();

void push(char ele) {
    if (isfull()) {
        cout << "Stack overflow\n";
    } else {
        stack[++top] = ele;
    }
}

char pop() {
    if (isempty()) {
        cout << "Stack underflow\n";
        return '\0';
    } else {
        return stack[top--];
    }
}

int isfull() {
    return top == 99;
}

int isempty() {
    return top == -1;
}

void display() {
    for (int i = top; i >= 0; i--) {
        cout << stack[i] << " ";
    }
    cout << endl;
}

void peek() {
    if (isempty()) {
        cout << "Stack underflow\n";
    } else {
        cout << "The peek element is: " << stack[top] << endl;
    }
}

int precedence(char a) {
    switch (a) {
        case '^': return 4;
        case '*': case '/': return 3;
        case '+': case '-': return 2;
        default: return 0;
    }
}

void reverse(char *infix) {
    int size = strlen(infix);
    int j = size, i = 0;
    char temp[size + 1];  // Extra space for null terminator

    temp[j--] = '\0';
    while (infix[i] != '\0') {
        temp[j--] = infix[i++];
    }
    strcpy(infix, temp);
}

int main() {
    char infix[100], postfix[100], prefix[100];
    cout << "Please enter your infix expression: ";
    cin.getline(infix, 100);

    int count = 0, flag = 1, j = 0;
    char symb, next;

    // Checking for balanced brackets
    for (int i = 0; infix[i] != '\0'; i++) {
        if (infix[i] == '(' || infix[i] == '[' || infix[i] == '{') {
            push(infix[i]);
            count++;
        } else if (infix[i] == ')' && stack[top] == '(') {
            pop(); count--;
        } else if (infix[i] == ']' && stack[top] == '[') {
            pop(); count--;
        } else if (infix[i] == '}' && stack[top] == '{') {
            pop(); count--;
        }
    }

    bool proper = (isempty() && flag == 1 && count == 0);
    
    if (proper) {
        // Infix to Postfix
        j = 0;
        for (int i = 0; i < strlen(infix); i++) {
            symb = infix[i];
            switch (symb) {
                case '(':
                    push('(');
                    break;
                case ')':
                    while ((next = pop()) != '(')
                        postfix[j++] = next;
                    break;
                case '+': case '-': case '*': case '/': case '^':
                    while (!isempty() && precedence(stack[top]) >= precedence(symb))
                        postfix[j++] = pop();
                    push(symb);
                    break;
                default:
                    postfix[j++] = symb;
            }
        }
        while (!isempty()) postfix[j++] = pop();
        postfix[j] = '\0';
        cout << "The postfix expression is: " << postfix << endl;

        // Infix to Prefix
        top = -1;
        reverse(infix);
        j = 0;
        for (int i = 0; i < strlen(infix); i++) {
            symb = infix[i];
            switch (symb) {
                case ')':
                    push(')');
                    break;
                case '(':
                    while ((next = pop()) != ')')
                        prefix[j++] = next;
                    break;
                case '+': case '-': case '*': case '/': case '^':
                    while (!isempty() && precedence(stack[top]) >= precedence(symb))
                        prefix[j++] = pop();
                    push(symb);
                    break;
                default:
                    prefix[j++] = symb;
            }
        }
        while (!isempty()) prefix[j++] = pop();
        prefix[j] = '\0';
        reverse(prefix);
        cout << "The prefix expression is: " << prefix << endl;
    } else {
        cout << "Please enter a valid expression.\n";
    }

    return 0;
}
