// 220968002
// Anamay Tripathy
// Circular Queue of Strings

#include <iostream>
using namespace std;
#define N 10

class Queue {
private:
    int front;
    int rear;
    string queue[N]; // Queue now stores strings

public:
    Queue() {
        front = rear = -1;
    }

    void enqueue(string x) {
        if (isfull()) {
            cout << "The queue is full" << endl;
        } else if (isempty()) {
            front = rear = 0;
            queue[rear] = x;
        } else {
            rear = (rear + 1) % N;
            queue[rear] = x;
        }
    }

    void dequeue() {
        if (isempty()) {
            cout << "The queue is empty" << endl;
        } else {
            cout << "The dequeued element is: " << queue[front] << endl;
            if (front == rear) { // Reset queue when last element is removed
                front = rear = -1;
            } else {
                front = (front + 1) % N;
            }
        }
    }

    void display() {
        if (isempty()) {
            cout << "The queue is empty" << endl;
        } else {
            cout << "The elements of the queue are: ";
            int i = front;
            while (i != rear) {
                cout << queue[i] << " ";
                i = (i + 1) % N;
            }
            cout << queue[rear] << endl; // Print last element
        }
    }

    int isempty() {
        return (front == -1 && rear == -1);
    }

    int isfull() {
        return ((rear + 1) % N == front);
    }

    void Front() {
        if (isempty()) {
            cout << "The queue is empty" << endl;
        } else {
            cout << "The front element in the queue is: " << queue[front] << endl;
        }
    }

    void Rear() {
        if (isempty()) {
            cout << "The queue is empty" << endl;
        } else {
            cout << "The rear element in the queue is: " << queue[rear] << endl;
        }
    }
};

int main() {
    Queue q;
    int choice;
    string c;
    
    do {
        cout << "\nPlease enter your choice:" << endl;
        cout << "1. Enqueue" << endl;
        cout << "2. Dequeue" << endl;
        cout << "3. Display" << endl;
        cout << "4. Front" << endl;
        cout << "5. Rear" << endl;
        cout << "6. Exit" << endl;
        cin >> choice;
        cin.ignore(); // To avoid input issues after numeric input

        switch (choice) {
            case 1:
                cout << "Please enter the element to enqueue: ";
                getline(cin, c); // Read string input
                q.enqueue(c);
                break;
            case 2:
                q.dequeue();
                break;
            case 3:
                q.display();
                break;
            case 4:
                q.Front();
                break;
            case 5:
                q.Rear();
                break;
            case 6:
                cout << "Exiting..." << endl;
                return 0;
            default:
                cout << "Invalid choice! Please enter a valid option." << endl;
        }
    } while (true);

    return 0;
}
