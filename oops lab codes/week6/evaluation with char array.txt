// 230968270
// Anamay Tripathy
// Postfix and Prefix Expression Evaluation

#include <iostream>
#include <cmath>
#include <cstring>

using namespace std;

int stack[100], top = -1;

int isempty();
int isfull();

void push(int ele) {
    if (isfull()) {
        cout << "Stack overflow\n";
    } else {
        stack[++top] = ele;
    }
}

int pop() {
    if (isempty()) {
        cout << "Stack underflow\n";
        return -1;
    } else {
        return stack[top--];
    }
}

int isfull() {
    return top == 99;
}

int isempty() {
    return top == -1;
}

int evaluate(int a, int b, char op) {
    switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return (b != 0) ? a / b : throw runtime_error("Division by zero");
        case '^': return pow(a, b);
        default: return 0;
    }
}

int is_digit(char c) {
    return (c >= '0' && c <= '9');
}

int main() {
    char exp[100], n[100];
    int numb = 0, k = 0, flag = 0;

    cout << "Please enter the expression with spaces to evaluate" << endl;
    cin.getline(exp, 100);
    
    cout << "Choose evaluation type:" << endl;
    cout << "1. Postfix Expression" << endl;
    cout << "2. Prefix Expression" << endl;
    
    char ch;
    cin >> ch;
    cin.ignore();  // To handle input buffer

    if (ch == '1') {
        // Postfix Evaluation
        for (int i = 0; i < strlen(exp); i++) {
            char c = exp[i];

            if (is_digit(c)) {
                numb = numb * 10 + (c - '0');
            } else if (c == ' ') {
                if (numb != 0) {
                    push(numb);
                    numb = 0;
                }
            } else if (c == '+' || c == '-' || c == '*' || c == '/' || c == '^') {
                int A = pop();
                int B = pop();
                int res = evaluate(B, A, c);
                push(res);
            }
        }
        cout << "The evaluated result is: " << stack[top] << endl;
    } 
    
    else if (ch == '2') {
        // Prefix Evaluation
        for (int j = strlen(exp) - 1; j >= 0; j--) {
            char i = exp[j];

            if (is_digit(i)) {
                n[k++] = i;
                flag = 1;
            } else if (i == ' ') {
                if (flag == 1) {
                    for (int l = k - 1; l >= 0; l--) {
                        numb = numb * 10 + (n[l] - '0');
                    }
                    k = 0;
                    push(numb);
                    numb = 0;
                    flag = 0;
                }
            } else if (i == '+' || i == '-' || i == '*' || i == '/' || i == '^') {
                int A = pop();
                int B = pop();
                int res = evaluate(A, B, i);
                push(res);
            }
        }
        cout << "The evaluated result is: " << stack[top] << endl;
    } 
    
    else {
        cout << "Invalid choice" << endl;
    }

    return 0;
}
