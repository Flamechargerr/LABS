// 230968270
// Anamay Tripathy
// Doubly Linked List Implementation

#include <iostream>
#include <cstdlib>
using namespace std;

struct node {
    struct node* pre;
    int data;
    struct node* next;
};

struct node* front = NULL;
struct node* rear = NULL;

// Function to insert an element at the rear
void insertatrear(int ele) {
    struct node* newnode = new struct node;
    newnode->data = ele;
    newnode->next = NULL;
    
    if (front == NULL && rear == NULL) {
        front = newnode;
        rear = newnode;
        newnode->pre = NULL;
    } else {
        rear->next = newnode;
        newnode->pre = rear;
        rear = newnode;
    }
}

// Function to delete an element from the rear
void deleterear() {
    if (rear == NULL) {
        cout << "The List is empty already" << endl;
    } else if (rear == front) {
        struct node* temp = rear;
        delete temp;
        front = rear = NULL;
    } else {
        struct node* temp = rear;
        rear = rear->pre;
        rear->next = NULL;
        delete temp;
    }
}

// Function to insert an element at a specific position
void insertatpos(int pos) {
    struct node* newnode = new struct node;
    cout << "Enter data to add at position: ";
    cin >> newnode->data;

    if (pos == 1) {
        newnode->pre = NULL;
        newnode->next = front;
        if (front != NULL)
            front->pre = newnode;
        front = newnode;
    } else {
        struct node* temp = front;
        for (int i = 1; i < pos - 1 && temp != NULL; i++) {
            temp = temp->next;
        }

        if (temp == NULL) {
            cout << "Invalid position!" << endl;
            return;
        }

        newnode->pre = temp;
        newnode->next = temp->next;
        if (temp->next != NULL) {
            temp->next->pre = newnode;
        }
        temp->next = newnode;
    }
}

// Function to delete an element at a specific position
void deleteatpos(int pos) {
    if (front == NULL) {
        cout << "The list is empty" << endl;
        return;
    }
    
    struct node* temp = front;

    if (pos == 1) {
        front = front->next;
        if (front != NULL)
            front->pre = NULL;
        delete temp;
    } else {
        struct node* prev = NULL;
        for (int i = 1; i < pos && temp != NULL; i++) {
            prev = temp;
            temp = temp->next;
        }

        if (temp == NULL) {
            cout << "Position not found" << endl;
            return;
        }

        prev->next = temp->next;
        if (temp->next != NULL) {
            temp->next->pre = prev;
        }
        delete temp;
    }
}

// Function to insert an element after a given element
void insertafterele(int ele) {
    int pos = 1;
    struct node* temp = front;

    while (temp != NULL && temp->data != ele) {
        pos++;
        temp = temp->next;
    }

    if (temp == NULL) {
        cout << "Element not found in the list" << endl;
    } else {
        insertatpos(pos + 1);
    }
}

// Function to insert an element before a given element
void insertbeforeele(int ele) {
    int pos = 1;
    struct node* temp = front;

    while (temp != NULL && temp->data != ele) {
        pos++;
        temp = temp->next;
    }

    if (temp == NULL) {
        cout << "Element not found in the list" << endl;
    } else {
        insertatpos(pos);
    }
}

// Function to print the linked list
void print() {
    struct node* temp = front;
    cout << "The list elements are: ";
    
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    
    cout << endl;
}

// Main function
int main() {
    int ch;
    while (1) {
        cout << "\nPlease enter your choice:" << endl;
        cout << "1. Insert an element at rear end" << endl;
        cout << "2. Delete an element from rear end" << endl;
        cout << "3. Insert an element at a given position" << endl;
        cout << "4. Delete an element at a given position" << endl;
        cout << "5. Insert an element after a given element" << endl;
        cout << "6. Insert an element before a given element" << endl;
        cout << "7. Print the list" << endl;
        cout << "8. Exit" << endl;
        
        cin >> ch;

        switch (ch) {
            case 1:
                cout << "Enter the element to be added: ";
                int e;
                cin >> e;
                insertatrear(e);
                break;
            case 2:
                deleterear();
                break;
            case 3:
                cout << "Enter the position at which element to be added: ";
                int p;
                cin >> p;
                insertatpos(p);
                break;
            case 4:
                cout << "Enter the position at which element to be deleted: ";
                int pk;
                cin >> pk;
                deleteatpos(pk);
                break;
            case 5:
                cout << "Enter the element after which to add a new element: ";
                int ek;
                cin >> ek;
                insertafterele(ek);
                break;
            case 6:
                cout << "Enter the element before which to add a new element: ";
                int ee;
                cin >> ee;
                insertbeforeele(ee);
                break;
            case 7:
                print();
                break;
            case 8:
                exit(0);
            default:
                cout << "Invalid choice! Please try again." << endl;
        }
    }
}
