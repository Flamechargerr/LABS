// Program by Anamay Tripathy
// Upper Triangular Matrix Storage and Retrieval

#include <iostream>
using namespace std;

int main() {
    int matrix[20][20], a[100]; // Adjusted size for mapped array
    int i, j, m, n, count = 0;

    // Input matrix dimension
    cout << "Please enter the dimension of the square matrix: ";
    cin >> m;
    n = m; // Ensuring it's a square matrix

    // Input nonzero elements only
    cout << "Please enter nonzero elements of the upper triangular matrix:\n";
    for (i = 0; i < m; i++) {
        for (j = 0; j < m; j++) {
            if (i > j) {
                matrix[i][j] = 0; // Assign zero to elements below the main diagonal
            } else {
                cin >> matrix[i][j];
            }
        }
    }

    // Display the entered matrix
    cout << "The entered matrix is:\n";
    for (i = 0; i < m; i++) {
        for (j = 0; j < m; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    // Store nonzero elements into a 1D mapped array
    for (i = 0; i < m; i++) {
        for (j = i; j < m; j++) { // Only store upper triangular elements
            a[count++] = matrix[i][j];
        }
    }

    // Display mapped array
    cout << "The mapped array is:\n";
    for (i = 0; i < count; i++) {
        cout << a[i] << " ";
    }
    cout << endl;

    // Retrieving an element from the matrix
    int c, b;
    cout << "Please enter the row and column to be retrieved: ";
    cin >> c >> b;

    // Validity check for row and column
    if (c >= m || b >= m || c < 0 || b < 0) {
        cout << "The entered row and column number is invalid.\n";
    } else if (c > b) {
        cout << "The element is 0\n"; // If below the main diagonal
    } else {
        // Corrected formula to retrieve element from compressed array
        int index = (c * m + b - (c * (c + 1) / 2));
        cout << "The element is: " << a[index] << endl;
    }

    return 0;
}
