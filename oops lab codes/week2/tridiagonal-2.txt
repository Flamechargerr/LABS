// Program by Anamay Tripathy
// Tridiagonal Matrix Storage and Retrieval

#include <iostream>
#include <cmath> // Use <cmath> instead of <math.h> for C++
using namespace std;

int main() {
    int matrix[20][20], a[60]; // Adjusted size for a mapped array
    int i, j, m, count = 0;

    // Input matrix dimension
    cout << "Please enter the dimension of the tridiagonal matrix: ";
    cin >> m;

    // Input nonzero elements only
    cout << "Please enter nonzero elements of the tridiagonal matrix:\n";
    for (i = 0; i < m; i++) {
        for (j = 0; j < m; j++) {
            if (abs(i - j) > 1) {
                matrix[i][j] = 0; // Assign zero to elements outside tridiagonal band
            } else {
                cin >> matrix[i][j];
            }
        }
    }

    // Display the entered matrix
    cout << "The entered matrix is:\n";
    for (i = 0; i < m; i++) {
        for (j = 0; j < m; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    // Store nonzero elements into a 1D mapped array
    for (i = 0; i < m; i++) {
        for (j = 0; j < m; j++) {
            if (matrix[i][j] != 0) {
                a[count++] = matrix[i][j];
            }
        }
    }

    // Display mapped array
    cout << "The mapped array is:\n";
    for (i = 0; i < count; i++) {
        cout << a[i] << " ";
    }
    cout << endl;

    // Retrieving an element from the matrix
    int c, b;
    cout << "Please enter the row and column to be retrieved: ";
    cin >> c >> b;

    // Validity check for row and column
    if (c >= m || b >= m || c < 0 || b < 0) {
        cout << "Invalid row or column entered!\n";
    } else if (abs(c - b) > 1) {
        cout << "The element is 0\n"; // If not in tridiagonal band
    } else {
        // Corrected formula to retrieve element from compressed array
        int index;
        if (c == b)        // Main diagonal
            index = c * 2;
        else if (c == b - 1) // Upper diagonal
            index = c * 2 + 1;
        else                // Lower diagonal
            index = (c - 1) * 2 + 1;

        cout << "The element is: " << a[index] << endl;
    }

    return 0;
}
