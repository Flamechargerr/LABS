#include<iostream>
using namespace std;

// Program by Anamay Tripathy (230968270)
struct node
{
    int data;
    struct node* left;
    struct node* right;
};

struct node* create()
{
    struct node* newnode = new struct node;
    int x;
    cout << "Please enter the data (-1 if no child nodes) " << endl;
    cin >> x;
    if (x == -1)
    {
        return NULL;
    }
    newnode->data = x;
    cout << "Please enter data for left of " << x << endl;
    newnode->left = create();
    cout << "Please enter data for right of " << x << endl;
    newnode->right = create();
    return newnode;
}

void findParent(struct node* root, int ele, int &found) {
    if (root == nullptr || found) {
        return;
    }
    
    if ((root->left != nullptr && root->left->data == ele) || 
        (root->right != nullptr && root->right->data == ele)) {
        cout << "Parent of " << ele << " is " << root->data << endl;
        found = 1;
        return;
    }
    
    findParent(root->left, ele, found);
    findParent(root->right, ele, found);
}

int treeDepth(struct node* root) {
    if (root == nullptr) {
        return 0;
    }
    return 1 + max(treeDepth(root->left), treeDepth(root->right));
}

int main()
{
    struct node* root;
    root = create();
    int ch, e;
    cout << "The Tree has Been Created" << endl;
    while (true)
    {
        cout << "Please enter your choice" << endl;
        cout << "1. Find Parent of an element in tree" << endl;
        cout << "2. Find Depth of the tree" << endl;
        cout << "3. Exit" << endl;
        cin >> ch;
        switch (ch)
        {
        case 1:
            cout << "Please enter the element whose parent is to be known" << endl;
            cin >> e;
            if (root->data == e)
            {
                cout << "The element is the root element" << endl;
            }
            else
            {
                int found = 0;
                findParent(root, e, found);
                if (!found) {
                    cout << "Element not found in the tree." << endl;
                }
            }
            break;
        case 2:
            cout << "The depth of the tree is: " << treeDepth(root) << endl;
            break;
        case 3:
            exit(0);
        default:
            cout << "Invalid choice, please try again." << endl;
        }
    }
}
