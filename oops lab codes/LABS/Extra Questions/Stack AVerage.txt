// Name: Anamay Tripathy
// Code: 230968270
// Program: C++ program to find the average of elements in a stack

#include <iostream>
using namespace std;

#define MAX_SIZE 20

class Stack {
private:
    int top;
    int arr[MAX_SIZE];

public:
    Stack() {
        top = -1;
    }

    void push(int ele) {
        if (isFull()) {
            cout << "Stack overflow\n";
        } else {
            arr[++top] = ele;
        }
    }

    int pop() {
        if (isEmpty()) {
            cout << "Stack underflow\n";
            return -1; // Indicating error
        }
        return arr[top--];
    }

    bool isFull() {
        return (top == MAX_SIZE - 1);
    }

    bool isEmpty() {
        return (top == -1);
    }

    int peek() {
        if (isEmpty()) {
            cout << "Stack is empty\n";
            return -1;
        }
        return arr[top];
    }

    void display() {
        if (isEmpty()) {
            cout << "Stack is empty\n";
            return;
        }
        for (int i = top; i >= 0; i--) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }

    void average() {
        if (isEmpty()) {
            cout << "Stack is empty, cannot compute average.\n";
            return;
        }

        Stack tempStack;
        double sum = 0;
        int count = 0;

        while (!isEmpty()) {
            int ele = pop();
            sum += ele;
            tempStack.push(ele);
            count++;
        }

        // Restore original stack
        while (!tempStack.isEmpty()) {
            push(tempStack.pop());
        }

        cout << "The average of the stack elements is: " << (sum / count) << endl;
        display();
    }
};

int main() {
    Stack s;
    int n, value;

    cout << "Enter number of elements to be pushed into stack: ";
    cin >> n;

    if (n > MAX_SIZE) {
        cout << "Error: Stack can hold a maximum of " << MAX_SIZE << " elements.\n";
        return 1;
    }

    cout << "Enter elements to be pushed:\n";
    for (int i = 0; i < n; i++) {
        cin >> value;
        s.push(value);
    }

    cout << "The stack elements are:\n";
    s.display();

    s.average();

    return 0;
}
