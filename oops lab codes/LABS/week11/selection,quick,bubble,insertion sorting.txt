// 230968270
// Anamay Tripathy
// Sorting Algorithms Implementation

#include <iostream>
#include <cstdlib>
using namespace std;

void selectionsort(int a[], int n) {
    for (int i = 0; i < n - 1; i++) {
        int minindex = i;
        for (int j = i + 1; j < n; j++) {
            if (a[j] < a[minindex]) {
                minindex = j;
            }
        }
        if (minindex != i) {
            swap(a[i], a[minindex]);
        }
    }
}

void bubblesort(int a[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (a[j] > a[j + 1]) {
                swap(a[j], a[j + 1]);
            }
        }
    }
}

void insertionsort(int a[], int n) {
    for (int i = 1; i < n; i++) {
        int temp = a[i], j;
        for (j = i - 1; j >= 0 && a[j] > temp; j--) {
            a[j + 1] = a[j];
        }
        a[j + 1] = temp;
    }
}

int partition(int a[], int lb, int ub) {
    int pivot = a[lb];
    int start = lb;
    int end = ub;

    while (start < end) {
        while (start <= ub && a[start] <= pivot) {
            start++;
        }
        while (a[end] > pivot) {
            end--;
        }
        if (start < end) {
            swap(a[start], a[end]);
        }
    }
    swap(a[lb], a[end]);
    return end;
}

void quicksort(int a[], int lb, int ub) {
    if (lb < ub) {
        int loc = partition(a, lb, ub);
        quicksort(a, lb, loc - 1);
        quicksort(a, loc + 1, ub);
    }
}

void printArray(int a[], int n) {
    for (int i = 0; i < n; i++)
        cout << a[i] << " ";
    cout << endl;
}

int main() {
    int ch, n;
    cout << "Please enter size of array: ";
    cin >> n;

    if (n <= 0) {
        cout << "Invalid array size!" << endl;
        return 1;
    }

    int a[n], original[n];
    cout << "Please enter array elements: ";
    for (int i = 0; i < n; i++) {
        cin >> a[i];
        original[i] = a[i];  // Store original array
    }

    while (true) {
        cout << "\nPlease enter your choice:\n";
        cout << "1. Selection Sort\n";
        cout << "2. Insertion Sort\n";
        cout << "3. Bubble Sort\n";
        cout << "4. Quick Sort\n";
        cout << "5. Exit\n";
        cin >> ch;

        for (int i = 0; i < n; i++)  // Restore original array before each sort
            a[i] = original[i];

        switch (ch) {
            case 1:
                selectionsort(a, n);
                cout << "After sorting by Selection Sort:\n";
                printArray(a, n);
                break;
            case 2:
                insertionsort(a, n);
                cout << "After sorting by Insertion Sort:\n";
                printArray(a, n);
                break;
            case 3:
                bubblesort(a, n);
                cout << "After sorting by Bubble Sort:\n";
                printArray(a, n);
                break;
            case 4:
                quicksort(a, 0, n - 1);
                cout << "After sorting by Quick Sort:\n";
                printArray(a, n);
                break;
            case 5:
                exit(0);
            default:
                cout << "Invalid choice! Please try again.\n";
        }
    }
}
