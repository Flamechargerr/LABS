// Anamay Tripathy (230968270)
#include <iostream>
using namespace std;

struct node {
    int data;
    struct node* left;
    struct node* right;
};

// Function to create a binary tree
struct node* create() {
    struct node* newnode = new struct node;
    int x;
    cout << "Enter data (-1 for no child nodes): ";
    cin >> x;
    if (x == -1) {
        return NULL;
    }
    newnode->data = x;
    cout << "Enter data for left of " << x << endl;
    newnode->left = create();
    cout << "Enter data for right of " << x << endl;
    newnode->right = create();
    return newnode;
}

// Function to find the parent of a given node
void findParent(struct node* root, int ele, struct node* parent = NULL) {
    if (root == nullptr) {
        return;
    }
    if (root->data == ele) {
        if (parent)
            cout << "Parent of " << ele << " is " << parent->data << endl;
        else
            cout << "The element is the root node." << endl;
        return;
    }
    findParent(root->left, ele, root);
    findParent(root->right, ele, root);
}

// Function to find the depth of the tree
int treeDepth(struct node* root) {
    if (root == nullptr) {
        return 0;
    }
    return 1 + max(treeDepth(root->left), treeDepth(root->right));
}

// Helper function to find ancestors of a given element
bool findAncestors(struct node* root, int ele) {
    if (root == nullptr) {
        return false;
    }
    if (root->data == ele) {
        return true;
    }
    if (findAncestors(root->left, ele) || findAncestors(root->right, ele)) {
        cout << root->data << " ";
        return true;
    }
    return false;
}

// Wrapper function to print ancestors
void printAncestors(struct node* root, int ele) {
    if (!findAncestors(root, ele)) {
        cout << "Element not found in the tree." << endl;
    }
}

int main() {
    struct node* root = create();
    int ch, e;
    cout << "The Tree has Been Created" << endl;
    while (true) {
        cout << "\nMenu:\n";
        cout << "1. Find Parent of an element" << endl;
        cout << "2. Find Depth of the tree" << endl;
        cout << "3. Find Ancestors of an element" << endl;
        cout << "4. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> ch;
        switch (ch) {
        case 1:
            cout << "Enter element: ";
            cin >> e;
            findParent(root, e);
            break;
        case 2:
            cout << "Tree Depth: " << treeDepth(root) << endl;
            break;
        case 3:
            cout << "Enter element: ";
            cin >> e;
            cout << "Ancestors of " << e << ": ";
            printAncestors(root, e);
            cout << endl;
            break;
        case 4:
            exit(0);
        default:
            cout << "Invalid choice, please try again." << endl;
        }
    }
}
