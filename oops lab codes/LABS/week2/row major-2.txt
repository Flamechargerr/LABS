// #anamaytripathy
#include <iostream>
using namespace std;

int main() {
    int matrix[20][20], a[400]; // Increased 1D array size to avoid overflow
    int m, n, i, j;

    // Get matrix dimensions
    cout << "Please enter the dimensions (rows and columns): ";
    cin >> m >> n;

    if (m <= 0 || n <= 0 || m > 20 || n > 20) {
        cout << "Invalid dimensions! Please enter values between 1 and 20.\n";
        return 1;
    }

    // Input matrix elements
    cout << "Please enter the elements of the matrix:\n";
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            cin >> matrix[i][j];
        }
    }

    // Display the matrix
    cout << "\nThe entered matrix is:\n";
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    // Mapping non-zero elements to a 1D array (row-major order)
    int count = 0;
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            if (matrix[i][j] != 0) {
                a[count++] = matrix[i][j];
            }
        }
    }

    // Display the mapped array
    cout << "\nThe mapped array using row-major order is:\n";
    for (i = 0; i < count; i++) {
        cout << a[i] << " ";
    }
    cout << endl;

    // Retrieve an element
    int row, col;
    cout << "\nPlease enter the row and column to be retrieved: ";
    cin >> row >> col;

    if (row < 0 || row >= m || col < 0 || col >= n) {
        cout << "Invalid indices! Please enter values within the matrix range.\n";
    } else {
        cout << "The element at (" << row << ", " << col << ") is: " << matrix[row][col] << endl;
    }

    return 0;
}
