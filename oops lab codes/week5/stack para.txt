// Program by Anamay Tripathy
// Parenthesis Matching using Stack

#include <iostream>
using namespace std;

char stack[100];
int top = -1;

bool isEmpty() {
    return top == -1;
}

bool isFull() {
    return top == 99;
}

void push(char ele) {
    if (isFull()) {
        cout << "Stack overflow\n";
    } else {
        stack[++top] = ele;
    }
}

void pop() {
    if (!isEmpty()) {
        top--;
    }
}

bool isMatchingPair(char open, char close) {
    return (open == '(' && close == ')') ||
           (open == '[' && close == ']') ||
           (open == '{' && close == '}');
}

bool isValidExpression(const char str[]) {
    for (int i = 0; str[i] != '\0'; i++) {
        if (str[i] == '(' || str[i] == '[' || str[i] == '{') {
            push(str[i]);
        } else if (str[i] == ')' || str[i] == ']' || str[i] == '}') {
            if (isEmpty() || !isMatchingPair(stack[top], str[i])) {
                return false;
            }
            pop();
        }
    }
    return isEmpty();
}

int main() {
    char str[100];
    cout << "Please enter your expression: ";
    cin.getline(str, 100);

    if (isValidExpression(str)) {
        cout << "The expression is properly balanced\n";
    } else {
        cout << "The expression is not balanced\n";
    }

    return 0;
}
