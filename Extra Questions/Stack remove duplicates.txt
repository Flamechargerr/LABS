// Name: Anamay Tripathy
// Code: 230968270

#include<iostream>
using namespace std;

#define MAX_SIZE 20

class Stack {
private:
    int top;
    int arr[MAX_SIZE];

public:
    // Constructor initializes the stack
    Stack() : top(-1) {}

    // Push an element onto the stack
    void push(int ele) {
        if (isFull()) {
            cout << "Stack overflow\n";
        } else {
            arr[++top] = ele;
        }
    }

    // Pop an element from the stack
    int pop() {
        if (isEmpty()) {
            cout << "Stack underflow\n";
            return -1; // return -1 if stack is empty
        } else {
            return arr[top--];
        }
    }

    // Check if the stack is full
    bool isFull() {
        return top == MAX_SIZE - 1;
    }

    // Check if the stack is empty
    bool isEmpty() {
        return top == -1;
    }

    // Peek the top element of the stack
    int peek() {
        if (isEmpty()) {
            cout << "Stack underflow";
            return -1; // return -1 if empty
        } else {
            return arr[top];
        }
    }

    // Display the elements in the stack
    void display() {
        if (isEmpty()) {
            cout << "Stack underflow";
        } else {
            for (int i = top; i >= 0; i--) {
                cout << arr[i] << " ";
            }
        }
        cout << endl;
    }

    // Remove duplicates from the stack
    void removeDuplicates() {
        Stack tempStack;
        int ele;

        // Traverse the original stack
        while (!isEmpty()) {
            ele = pop();
            bool isDuplicate = false;

            // Check if the element is already in tempStack
            for (int i = tempStack.top; i >= 0; i--) {
                if (tempStack.arr[i] == ele) {
                    isDuplicate = true;
                    break;
                }
            }

            // If not a duplicate, push it onto tempStack
            if (!isDuplicate) {
                tempStack.push(ele);
            }
        }

        // Display the stack without duplicates
        cout << "Stack after removing duplicates: ";
        tempStack.display();
    }
};

int main() {
    Stack s;
    int n, a[100];

    // Input number of elements
    cout << "Enter number of elements to be pushed into stack: ";
    cin >> n;

    // Input elements
    cout << "Enter elements to be pushed: ";
    for (int i = 0; i < n; i++) {
        cin >> a[i];
        s.push(a[i]);
    }

    // Display stack elements
    cout << "The stack elements are: ";
    s.display();

    // Remove duplicates and display updated stack
    s.removeDuplicates();

    return 0;
}
