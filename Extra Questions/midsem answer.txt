// Name: Anamay Tripathy
// Code: 230968270

#include<iostream>
#include<cctype>
using namespace std;

#define N 20

class stack {
private:
    int top;
    char a[N];
public:
    stack() {
        top = -1;
    }

    void push(char c) {
        if (isfull()) {
            cout << "Stack overflow" << endl;
        } else {
            top++;
            a[top] = c;
        }
    }

    char pop() {
        if (isempty()) {
            cout << "Stack underflow" << endl;
            return '\0'; // Return a null character if stack is empty
        } else {
            char popelement = a[top];
            top--;
            return popelement;
        }
    }

    bool isfull() {
        if (top == N - 1)
            return true;
        else
            return false;
    }

    bool isempty() {
        if (top == -1)
            return true;
        else
            return false;
    }
};

int main() {
    stack s1;
    char w[20], wr[20], f[40];
    char temp[20];
    int lengthw = 0, lengthwr = 0, i, k;
    
    cout << "Please enter your w string: ";
    cin.getline(w, 20);
    cout << "Please enter your wr string: ";
    cin.getline(wr, 20);

    // Push all characters of the w string into the stack
    for (int j = 0; w[j] != '\0'; j++) {
        char s = w[j];
        s1.push(s);
        lengthw++;
    }

    // Calculate the length of the wr string
    for (int j = 0; wr[j] != '\0'; j++) {
        lengthwr++;
    }

    // Pop characters from the stack into temp and validate
    for (int j = 0; j < lengthw; j++) {
        temp[j] = s1.pop();
    }

    // Check if lengths of w and wr are the same
    if (lengthw != lengthwr) {
        cout << "Invalid String" << endl;
        exit(1);
    }

    int flag = 0;
    // Check if the reversed string matches the wr string
    for (int j = 0; j < lengthw; j++) {
        if (temp[j] != wr[j]) {
            flag = 1;
            break;
        }
    }

    // Concatenate w, 'c' and wr into f
    for (i = 0; i < lengthw; i++) {
        f[i] = w[i];
    }

    k = i;
    f[i] = 'c';

    for (i = k + 1, int j = 0; j < lengthwr; i++, j++) {
        f[i] = wr[j];
    }

    f[i] = '\0'; // Null-terminate the final string

    // Output the strings
    cout << "The W string is: " << endl;
    cout << w << endl;
    cout << "The WR string is: " << endl;
    cout << wr << endl;
    cout << "The final string after concatenation is: " << endl;
    cout << f << endl;

    // Validate the string
    if (flag == 0) {
        cout << "The string is valid" << endl;
    } else {
        cout << "The string is invalid" << endl;
    }

    return 0;
}
