// # anamaytripathy
#include <iostream>
using namespace std;

int main() {
    int m, n;

    // Getting dimensions of the matrix
    cout << "Enter the dimensions of the matrix (rows, columns): ";
    cin >> m >> n;

    if (m <= 0 || n <= 0) {
        cout << "Invalid matrix dimensions! Exiting program.\n";
        return 1;
    }

    int matrix[m][n], colMajorArr[m * n];

    // Input matrix elements
    cout << "Enter the elements of the matrix:\n";
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            cin >> matrix[i][j];
        }
    }

    // Displaying the entered matrix
    cout << "\nThe entered matrix is:\n";
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    // Mapping matrix to column-major order array
    int index = 0;
    for (int col = 0; col < n; col++) {
        for (int row = 0; row < m; row++) {
            colMajorArr[index++] = matrix[row][col];
        }
    }

    // Displaying the column-major mapped array
    cout << "\nThe mapped array using column-major order is:\n";
    for (int i = 0; i < index; i++) {
        cout << colMajorArr[i] << " ";
    }
    cout << endl;

    // Retrieving an element using column-major order
    int rowIdx, colIdx;
    cout << "\nEnter the row and column indices to retrieve: ";
    cin >> rowIdx >> colIdx;

    if (rowIdx < 0 || rowIdx >= m || colIdx < 0 || colIdx >= n) {
        cout << "Invalid index! Please enter values within matrix dimensions.\n";
    } else {
        cout << "The element at (" << rowIdx << ", " << colIdx << ") is: " 
             << colMajorArr[(colIdx * m) + rowIdx] << endl;
    }

    return 0;
}
