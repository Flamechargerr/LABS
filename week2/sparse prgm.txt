// #anamaytripathy
#include<iostream>
using namespace std;

struct Sparse {
    int row;
    int col;
    int value;
};

int main() {
    int matrix[20][20], i, j, m, n, k, counter = 0;
    Sparse s[30];  // Array to store sparse matrix elements

    // Input matrix dimensions
    cout << "Please enter the rows and columns of the matrix: ";
    cin >> m >> n;

    // Input matrix elements
    cout << "Please enter the elements of the matrix:\n";
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            cin >> matrix[i][j];
            if (matrix[i][j] != 0) {
                counter++;
            }
        }
    }

    // Display the original matrix
    cout << "\nThe entered matrix is:\n";
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    // Store sparse matrix in triplet form
    s[0].row = m;
    s[0].col = n;
    s[0].value = counter;
    
    for (i = 0, k = 1; i < m; i++) { 
        for (j = 0; j < n; j++) {
            if (matrix[i][j] != 0) {
                s[k].row = i;
                s[k].col = j;
                s[k].value = matrix[i][j];
                k++;
            }
        }
    }

    // Display triplet representation
    cout << "\nTriplet representation:\n";
    cout << "Row   Column   Value\n";
    for (i = 1; i <= counter; i++) {
        cout << s[i].row << "     " << s[i].col << "       " << s[i].value << endl;
    }

    // Reconstruct the matrix
    int reconstructed[20][20] = {0};  // Initialize all values to 0

    for (i = 1; i <= counter; i++) {
        reconstructed[s[i].row][s[i].col] = s[i].value;
    }

    // Display the reconstructed matrix
    cout << "\nThe reconstructed matrix is:\n";
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            cout << reconstructed[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}
